#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from numpy import *

from sensor_msgs.msg import Joy

import sys, select, termios, tty

msg = """
Control Your Turtlebot!
---------------------------
Moving around with arrow keys:
      up
left down right

q/a : increase/decrease max speeds by 10%
w/s : increase/decrease only linear speed by 10%
e/d : increase/decrease only angular speed by 10%
space key, k : force stop
anything else : stop smoothly

CTRL-C to quit
"""

moveBindings = {
        'A':(1,0),
        'D':(0,1),
        'C':(0,-1),
        'B':(-1,0),
           }

speedBindings={
        'q':(0.1,0.1),
        'a':(-.1,-.1),
        'w':(.1,0),
        's':(-.1,0),
        'e':(0,.1),
        'd':(0,-.1),
          }

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
        if key == '\x1B' :
            key = sys.stdin.read(1)
            key = sys.stdin.read(1)
            #print key
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(speed,turn):
    return "currently:\tspeed %s\tturn %s " % (speed,turn)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    
    rospy.init_node('idmind_keyboard')
    pub = rospy.Publisher('/joy', Joy, queue_size=1)

    speed = .8
    turn = 1
    publish = 0

    x = 0
    th = 0
    status = 0
    count = 0
    target_speed = 0
    target_turn = 0
    control_speed = 0
    control_turn = 0
    try:
        print msg
        print vels(speed,turn)
        while(1):
            key = getKey()
            if key != '' :
                publish = 1
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                th = moveBindings[key][1]
                count = 0
            elif key in speedBindings.keys():
                speed = speed + speedBindings[key][0]
                turn = turn + speedBindings[key][1]
                count = 0
                print vels(speed,turn)
                if (status == 14):
                    print msg
                status = (status + 1) % 15
            elif key == ' ' or key == 'k' :
                x = 0
                th = 0
                control_speed = 0
                control_turn = 0
            else:
                count = count + 1
                if count > 4:
                    x = 0
                    th = 0
                if (key == '\x03'):
                    break

            target_speed = speed * x
            target_turn = turn * th

#            if target_speed > control_speed:
#                control_speed = min( target_speed, control_speed + 0.1 )
#            elif target_speed < control_speed:
#                control_speed = max( target_speed, control_speed - 0.1 )
#            else:
#                control_speed = target_speed

            control_speed = target_speed

#            if target_turn > control_turn:
#                control_turn = min( target_turn, control_turn + 0.1 )
#            elif target_turn < control_turn:
#                control_turn = max( target_turn, control_turn - 0.1 )
#            else:
#                control_turn = target_turn

            control_turn = target_turn
            
            if publish != 0 :
                joy_msg = Joy(); joy_msg.axes = zeros(4, float32); joy_msg.buttons = zeros(4, int32)
                joy_msg.header.stamp = rospy.Time.now()
                joy_msg.axes[3] = control_speed
                joy_msg.axes[2] = control_turn
                pub.publish(joy_msg)
                
            if control_speed == 0 and control_turn == 0 :
                publish = 0

    except:
        print e

    finally:
        joy_msg = Joy(); joy_msg.axes = zeros(4, float32); joy_msg.buttons = zeros(4, int32)
        joy_msg.header.stamp = rospy.Time.now()
        joy_msg.axes[3] = 0
        joy_msg.axes[2] = 0
        pub.publish(joy_msg)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
